name: Update Version on PR to Main

on:
  pull_request:
    types: [opened, reopened]
    branches: [ "main", "dev", "feat/iss-1/create-pipelines" ]

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get current version
        id: get_version
        run: |
          version=$(tr -d '\n' < version.txt)
          echo "Detected version: '$version'"
          echo "current_version=$version" >> $GITHUB_OUTPUT

      - name: Update version based on branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

          echo "${{ github.base_ref }} ${{ github.head_ref }}"

          if [[ "${{ github.base_ref }}" == "feat/automate-semantic-versioning-on-pr-merge" && "${{ github.head_ref }}" == "dev" ]]; then
            NEW_VERSION=$(echo "${{ steps.get_version.outputs.current_version }}" | awk -F. '{ $2 += 1; $3 = 0; print }' OFS=".")
            echo "ðŸ”§ Bumping MINOR version to $NEW_VERSION"
            ./scripts/update_version.sh "$NEW_VERSION"
          elif [[ "${{ github.base_ref }}" == "feat/automate-semantic-versioning-on-pr-merge" && "${{ github.head_ref }}" =~ ^release/.* ]]; then
            NEW_VERSION=$(echo "${{ steps.get_version.outputs.current_version }}" | awk -F. '{ $1 += 1; $2 = $3 = 0; print }' OFS=".")
            echo "ðŸ”§ Bumping MAJOR version to $NEW_VERSION"
            ./scripts/update_version.sh "$NEW_VERSION"
          elif [[ "${{ github.base_ref }}" == "feat/automate-semantic-versioning-on-pr-merge" && "${{ github.head_ref }}" =~ ^hotfix/.* ]]; then
            NEW_VERSION=$(echo "${{ steps.get_version.outputs.current_version }}" | awk -F. '{ $NF += 1; print }' OFS=".")
            echo "ðŸ”§ Bumping PATCH version (hotfix) to $NEW_VERSION"
            ./scripts/update_version.sh "$NEW_VERSION"
          elif [[ "${{ github.base_ref }}" == "dev" ]]; then
            NEW_VERSION=$(echo "${{ steps.get_version.outputs.current_version }}" | awk -F. '{ $NF += 1; print }' OFS=".")
            echo "ðŸ”§ Bumping PATCH version (PR to dev) to $NEW_VERSION"
            ./scripts/update_version.sh "$NEW_VERSION"
          fi
