name: Update Version on PR to Main

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [ "main", "dev", "feat/iss-1/create-pipelines" ]

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get current version
        id: get_version
        run: |
          version=$(tr -d '\n' < version.txt)
          echo "Versi√≥n actual: '$version'"
          echo "current_version=$version" >> $GITHUB_OUTPUT
      
      - name: Grant permissions to the script
        run: chmod +x ./scripts/update_version.sh
  
      - name: Update version and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configurar git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

          # Obtener variables
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          BASE_REF="${{ github.event.pull_request.base.ref }}"  # Rama destino (main/dev)
          HEAD_REF="${{ github.event.pull_request.head.ref }}"  # Rama origen (feat/hotfix)

          # L√≥gica de incremento
          NEW_VERSION=$CURRENT_VERSION
          if [[ "$BASE_REF" == "main" && "$HEAD_REF" =~ ^release/.* ]]; then
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{ $1++; $2=0; $3=0; print }' OFS=".")  # Major++
          elif [[ "$BASE_REF" == "dev" && "$HEAD_REF" =~ ^feat/.* ]]; then
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{ $2++; $3=0; print }' OFS=".")  # Minor++
          elif [[ "$BASE_REF" == "dev" && "$HEAD_REF" =~ ^hotfix/.* ]]; then
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{ $3++; print }' OFS=".")  # Patch++
          fi

          # Actualizar y hacer commit si hay cambios
          if [[ "$NEW_VERSION" != "$CURRENT_VERSION" ]]; then
            echo "üîÑ Actualizando versi√≥n: $CURRENT_VERSION ‚Üí $NEW_VERSION"
            ./scripts/update_version.sh "$NEW_VERSION"
            git add version.txt
            git commit -m "üöÄ Bump version: $NEW_VERSION [skip ci]"
            git push origin HEAD:${{ github.event.pull_request.head.ref }}  # Pushear a la rama del PR
          else
            echo "‚è© No se requiere actualizaci√≥n"
          fi