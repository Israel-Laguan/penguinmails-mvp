generator client {
  provider = "prisma-client-js"
  output   = "../app/api/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String          @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  companyId     Int?
  role          UserRole        @default(MEMBER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  campaigns     Campaign[]
  sessions      Session[]
  templates     Template[]
  company       Company?        @relation(fields: [companyId], references: [id])
  preferences   UserPreference?
  EmailAccount  EmailAccount[]
  Domain        Domain[]

  @@index([email])
  @@index([companyId])
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id               Int            @id @default(autoincrement())
  name             String
  stripeCustomerId String?        @unique
  planType         PlanType       @default(FREE)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  campaigns        Campaign[]
  clients          Client[]
  templates        Template[]
  users            User[]
  emailAccounts    EmailAccount[]
  domains          Domain[]

  @@index([stripeCustomerId])
}

model Client {
  id          Int              @id @default(autoincrement())
  email       String
  firstName   String?
  lastName    String?
  notes       String?
  maskPII     Boolean          @default(false)
  companyId   Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  campaigns   CampaignClient[]
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  emailEvents EmailEvent[]

  @@unique([companyId, email])
  @@index([companyId])
}

model Template {
  id            Int            @id @default(autoincrement())
  name          String
  subject       String
  bodyHtml      String
  companyId     Int
  createdById   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  campaignSteps CampaignStep[]
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy     User?          @relation(fields: [createdById], references: [id])

  @@index([companyId])
  @@index([createdById])
}

model Campaign {
  id            Int              @id @default(autoincrement())
  name          String
  status        CampaignStatus   @default(DRAFT)
  fromName      String
  fromEmail     String
  companyId     Int
  createdById   String?
  // Cached metrics for UI
  metrics       Json? // Stores aggregated metrics as JSON
  // Schedule settings at campaign level
  sendDays      Int[] // Array of weekday numbers (0-6)
  sendTimeStart String? // HH:mm format
  sendTimeEnd   String? // HH:mm format
  emailsPerDay  Int?
  timezone      String           @default("UTC")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  company       Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy     User?            @relation(fields: [createdById], references: [id])
  clients       CampaignClient[]
  steps         CampaignStep[]   @relation("CampaignSteps")
  emailEvents   EmailEvent[]

  @@index([companyId])
  @@index([createdById])
}

model CampaignStep {
  id            Int                    @id @default(autoincrement())
  sequenceOrder Int
  delayDays     Int                    @default(3)
  delayHours    Int                    @default(0)
  emailSubject  String?
  emailBody     String?
  templateId    Int
  campaignId    Int
  condition     CampaignEventContition @default(ALWAYS)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  campaign      Campaign               @relation("CampaignSteps", fields: [campaignId], references: [id], onDelete: Cascade)
  template      Template               @relation(fields: [templateId], references: [id])
  emailEvents   EmailEvent[]

  @@unique([campaignId, sequenceOrder])
  @@index([templateId])
  @@index([campaignId])
}

model CampaignClient {
  campaignId       Int
  clientId         Int
  statusInCampaign ClientCampaignStatus @default(PENDING)
  currentStepOrder Int?
  nextSendTime     DateTime?
  addedAt          DateTime             @default(now())
  campaign         Campaign             @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  client           Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  emailEvents      EmailEvent[]

  @@id([campaignId, clientId])
  @@index([clientId])
  @@index([campaignId])
}

model EmailEvent {
  id               Int             @id @default(autoincrement())
  type             EmailEventType
  timestamp        DateTime        @default(now())
  campaignId       Int
  clientId         Int
  campaignStepId   Int?
  campaignClientId Int?
  metadata         String?
  campaignClient   CampaignClient? @relation(fields: [campaignId, campaignClientId], references: [campaignId, clientId], onDelete: Cascade)
  campaign         Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignStep     CampaignStep?   @relation(fields: [campaignStepId], references: [id])
  client           Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([campaignId, clientId, type])
  @@index([campaignStepId])
  @@index([campaignId, campaignClientId])
  @@index([clientId])
}

model UserPreference {
  id            Int             @id @default(autoincrement())
  userId        String          @unique
  theme         ThemePreference @default(LIGHT)
  layoutDensity LayoutDensity   @default(NORMAL)
  timezone      String          @default("UTC")
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailAccount {
  id           Int                @id @default(autoincrement())
  email        String
  provider     String
  status       EmailAccountStatus @default(PENDING)
  reputation   Int                @default(0)
  warmupStatus WarmupStatus       @default(NOT_STARTED)
  dayLimit     Int                @default(100)
  sent24h      Int                @default(0)
  lastSync     DateTime?
  spf          Boolean            @default(false)
  dkim         Boolean            @default(false)
  dmarc        Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  companyId    Int
  createdById  String
  company      Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy    User               @relation(fields: [createdById], references: [id])

  @@unique([companyId, email])
  @@index([companyId])
  @@index([createdById])
}

model Domain {
  id          Int          @id @default(autoincrement())
  domain      String
  provider    String
  status      DomainStatus @default(PENDING)
  daysActive  Int          @default(0)
  reputation  Int          @default(0)
  spf         Boolean      @default(false)
  dkim        Boolean      @default(false)
  dmarc       Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  companyId   Int
  createdById String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy   User         @relation(fields: [createdById], references: [id])

  @@unique([companyId, domain])
  @@index([companyId])
  @@index([createdById])
}

enum UserRole {
  ADMIN
  MEMBER
}

enum PlanType {
  FREE
  STARTER
  PRO
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum CampaignEventContition {
  ALWAYS
  IF_NOT_OPENED
  IF_NOT_CLICKED
  IF_NOT_REPLIED
  IF_OPTION_A
  IF_OPTION_B
  IF_OPTION_C
  IF_OPTION_D
  IF_OPTION_E
  IF_UNSUBSCRIBED
}

enum ClientCampaignStatus {
  PENDING
  ACTIVE
  PAUSED
  FINISHED
  REMOVED
  BOUNCED
  UNSUBSCRIBED
}

enum ThemePreference {
  LIGHT
  DARK
  CONTRAST
}

enum LayoutDensity {
  COMPACT
  NORMAL
  WIDE
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  SPAM_COMPLAINT
  UNSUBSCRIBED
  REPLIED
}

enum EmailAccountStatus {
  PENDING
  ACTIVE
  ISSUE
  SUSPENDED
  DELETED
}

enum WarmupStatus {
  NOT_STARTED
  WARMING
  WARMED
  PAUSED
}

enum DomainStatus {
  PENDING
  VERIFIED
  SETUP_REQUIRED
  FAILED
  DELETED
}
